package app

import (
	"bytes"
	"math/big"
	"testing"

	"github.com/stretchr/testify/require"

	gethcmn "github.com/ethereum/go-ethereum/common"
	gethtypes "github.com/ethereum/go-ethereum/core/types"
	gethcrypto "github.com/ethereum/go-ethereum/crypto"

	"github.com/smartbch/smartbch/internal/ethutils"
	"github.com/smartbch/smartbch/internal/testutils"
)

var _sep101ABI = testutils.MustParseABI(`
[
{
  "inputs": [
	{
	  "internalType": "bytes",
	  "name": "key",
	  "type": "bytes"
	},
	{
	  "internalType": "bytes",
	  "name": "value",
	  "type": "bytes"
	}
  ],
  "name": "set",
  "outputs": [],
  "stateMutability": "nonpayable",
  "type": "function"
},
{
  "inputs": [
	{
	  "internalType": "bytes",
	  "name": "key",
	  "type": "bytes"
	}
  ],
  "name": "get",
  "outputs": [
	{
	  "internalType": "bytes",
	  "name": "",
	  "type": "bytes"
	}
  ],
  "stateMutability": "view",
  "type": "function"
}
]
`)

func TestSEP101(t *testing.T) {
	privKey, addr := testutils.GenKeyAndAddr()
	_app := CreateTestApp(privKey)
	defer DestroyTestApp(_app)

	// see testdata/seps/contracts/SEP101Proxy.sol
	creationBytecode := testutils.HexToBytes(`
608060405234801561001057600080fd5b50610602806100206000396000f3fe
608060405234801561001057600080fd5b50600436106100415760003560e01c
8063a18c751e14610046578063d6d7d52514610062578063f5ff5c7614610092
575b600080fd5b610060600480360381019061005b91906102c2565b6100b056
5b005b61007c6004803603810190610077919061027d565b610129565b604051
610089919061044c565b60405180910390f35b61009a6101c5565b6040516100
a7919061046e565b60405180910390f35b61271273ffffffffffffffffffffff
ffffffffffffffffff1663a18c751e858585856040518563ffffffff1660e01b
81526004016100f19493929190610411565b600060405180830381600087803b
15801561010b57600080fd5b505af115801561011f573d6000803e3d6000fd5b
5050505050505050565b606061271273ffffffffffffffffffffffffffffffff
ffffffff1663d6d7d52584846040518363ffffffff1660e01b81526004016101
689291906103ed565b60006040518083038186803b15801561018057600080fd
5b505afa158015610194573d6000803e3d6000fd5b505050506040513d600082
3e3d601f19601f820116820180604052508101906101bd9190610337565b9050
92915050565b61271281565b60006101de6101d9846104ba565b610489565b90
50828152602081018484840111156101f657600080fd5b610201848285610559
565b509392505050565b60008083601f84011261021b57600080fd5b82359050
67ffffffffffffffff81111561023457600080fd5b6020830191508360018202
8301111561024c57600080fd5b9250929050565b600082601f83011261026457
600080fd5b81516102748482602086016101cb565b91505092915050565b6000
806020838503121561029057600080fd5b600083013567ffffffffffffffff81
11156102aa57600080fd5b6102b685828601610209565b925092505092509290
50565b600080600080604085870312156102d857600080fd5b600085013567ff
ffffffffffffff8111156102f257600080fd5b6102fe87828801610209565b94
50945050602085013567ffffffffffffffff81111561031d57600080fd5b6103
2987828801610209565b925092505092959194509250565b6000602082840312
1561034957600080fd5b600082015167ffffffffffffffff8111156103635760
0080fd5b61036f84828501610253565b91505092915050565b60006103848385
6104f5565b935061039183858461054a565b61039a836105bb565b8401905093
92505050565b60006103b0826104ea565b6103ba81856104f5565b93506103ca
818560208601610559565b6103d3816105bb565b840191505092915050565b61
03e781610526565b82525050565b600060208201905081810360008301526104
08818486610378565b90509392505050565b6000604082019050818103600083
015261042c818688610378565b90508181036020830152610441818486610378
565b905095945050505050565b60006020820190508181036000830152610466
81846103a5565b905092915050565b6000602082019050610483600083018461
03de565b92915050565b6000604051905081810181811067ffffffffffffffff
821117156104b0576104af61058c565b5b8060405250919050565b600067ffff
ffffffffffff8211156104d5576104d461058c565b5b601f19601f8301169050
602081019050919050565b600081519050919050565b60008282526020820190
5092915050565b600073ffffffffffffffffffffffffffffffffffffffff8216
9050919050565b600061053182610538565b9050919050565b60006105438261
0506565b9050919050565b82818337600083830152505050565b60005b838110
1561057757808201518184015260208101905061055c565b8381111561058657
6000848401525b50505050565b7f4e487b710000000000000000000000000000
0000000000000000000000000000600052604160045260246000fd5b6000601f
19601f830116905091905056fea26469706673582212202729ba2e6a113d18cd
5eae5db9974bd47b58792b63cf541ac8a65b4b1a037afc64736f6c6343000800
0033
`)

	// deploy proxy
	tx1 := gethtypes.NewContractCreation(0, big.NewInt(0), 1000000, big.NewInt(1), creationBytecode)
	tx1 = ethutils.MustSignTx(tx1, _app.chainId.ToBig(), ethutils.MustHexToPrivKey(privKey))

	testutils.ExecTxInBlock(_app, 1, tx1)
	contractAddr := gethcrypto.CreateAddress(addr, tx1.Nonce())
	code := getCode(_app, contractAddr)
	require.True(t, len(code) > 0)

	key := []byte{0xAB, 0xCD}
	val := bytes.Repeat([]byte{0x12, 0x34}, 500)

	// call set()
	data, err := _sep101ABI.Pack("set", key, val)
	require.NoError(t, err)
	tx2 := gethtypes.NewTransaction(1, contractAddr, big.NewInt(0), 1000000, big.NewInt(1), data)
	tx2 = ethutils.MustSignTx(tx2, _app.chainId.ToBig(), ethutils.MustHexToPrivKey(privKey))
	testutils.ExecTxInBlock(_app, 3, tx2)

	blk3 := getBlock(_app, 3)
	require.Equal(t, int64(3), blk3.Number)
	require.Len(t, blk3.Transactions, 1)
	txInBlk3 := getTx(_app, blk3.Transactions[0])
	require.Equal(t, gethtypes.ReceiptStatusSuccessful, txInBlk3.Status)
	require.Equal(t, "success", txInBlk3.StatusStr)
	require.Equal(t, tx2.Hash(), gethcmn.Hash(txInBlk3.Hash))

	// call get()
	data, err = _sep101ABI.Pack("get", key)
	require.NoError(t, err)
	tx4 := gethtypes.NewTransaction(0, contractAddr, big.NewInt(0), 10000000, big.NewInt(1), data)
	statusCode, statusStr, output := call(_app, addr, tx4)
	require.Equal(t, gethtypes.ReceiptStatusSuccessful, statusCode)
	require.Equal(t, "success", statusStr)
	require.Equal(t, val, output)
}
