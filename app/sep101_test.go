package app

import (
	"bytes"
	"math/big"
	"testing"

	"github.com/stretchr/testify/require"

	gethcmn "github.com/ethereum/go-ethereum/common"
	gethtypes "github.com/ethereum/go-ethereum/core/types"
	gethcrypto "github.com/ethereum/go-ethereum/crypto"

	"github.com/smartbch/smartbch/internal/ethutils"
	"github.com/smartbch/smartbch/internal/testutils"
)

var _sep101ABI = testutils.MustParseABI(`
[
{
  "inputs": [
	{
	  "internalType": "bytes",
	  "name": "key",
	  "type": "bytes"
	},
	{
	  "internalType": "bytes",
	  "name": "value",
	  "type": "bytes"
	}
  ],
  "name": "set",
  "outputs": [],
  "stateMutability": "nonpayable",
  "type": "function"
},
{
  "inputs": [
	{
	  "internalType": "bytes",
	  "name": "key",
	  "type": "bytes"
	}
  ],
  "name": "get",
  "outputs": [
	{
	  "internalType": "bytes",
	  "name": "",
	  "type": "bytes"
	}
  ],
  "stateMutability": "view",
  "type": "function"
}
]
`)

func TestSEP101(t *testing.T) {
	privKey, addr := testutils.GenKeyAndAddr()
	_app := CreateTestApp(privKey)
	defer DestroyTestApp(_app)

	// see testdata/seps/contracts/SEP101Proxy.sol
	creationBytecode := testutils.HexToBytes(`
608060405234801561001057600080fd5b5061078b806100206000396000f3fe
608060405234801561001057600080fd5b50600436106100415760003560e01c
8063a18c751e14610046578063d6d7d52514610062578063f5ff5c7614610092
575b600080fd5b610060600480360381019061005b919061040a565b6100b056
5b005b61007c600480360381019061007791906103c5565b6101d2565b604051
61008991906105f7565b60405180910390f35b61009a61030d565b6040516100
a7919061057d565b60405180910390f35b61271273ffffffffffffffffffffff
ffffffffffffffffff166040518060400160405280601081526020017f736574
2862797465732c62797465732900000000000000000000000000000000815250
805190602001208585858560405160240161011d94939291906105bc565b6040
51602081830303815290604052907bffffffffffffffffffffffffffffffffff
ffffffffffffffffffffff19166020820180517bffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff83818316178352505050506040516101
879190610566565b6000604051808303816000865af19150503d806000811461
01c4576040519150601f19603f3d011682016040523d82523d6000602084013e
6101c9565b606091505b50505050505050565b606060008061271273ffffffff
ffffffffffffffffffffffffffffffff166040518060400160405280600a8152
6020017f67657428627974657329000000000000000000000000000000000000
0000000081525080519060200120868660405160240161024092919061059856
5b604051602081830303815290604052907bffffffffffffffffffffffffffff
ffffffffffffffffffffffffffff19166020820180517bffffffffffffffffff
ffffffffffffffffffffffffffffffffffffff83818316178352505050506040
516102aa9190610566565b600060405180830381855afa9150503d8060008114
6102e5576040519150601f19603f3d011682016040523d82523d600060208401
3e6102ea565b606091505b509150915080806020019051810190610303919061
047f565b9250505092915050565b61271281565b60006103266103218461064a
565b610619565b90508281526020810184848401111561033e57600080fd5b61
03498482856106e2565b509392505050565b60008083601f8401126103635760
0080fd5b8235905067ffffffffffffffff81111561037c57600080fd5b602083
01915083600182028301111561039457600080fd5b9250929050565b60008260
1f8301126103ac57600080fd5b81516103bc848260208601610313565b915050
92915050565b600080602083850312156103d857600080fd5b600083013567ff
ffffffffffffff8111156103f257600080fd5b6103fe85828601610351565b92
509250509250929050565b6000806000806040858703121561042057600080fd
5b600085013567ffffffffffffffff81111561043a57600080fd5b6104468782
8801610351565b9450945050602085013567ffffffffffffffff811115610465
57600080fd5b61047187828801610351565b925092505092959194509250565b
60006020828403121561049157600080fd5b600082015167ffffffffffffffff
8111156104ab57600080fd5b6104b78482850161039b565b9150509291505056
5b6104c9816106a1565b82525050565b60006104db8385610685565b93506104
e88385846106d3565b6104f183610744565b840190509392505050565b600061
05078261067a565b6105118185610685565b93506105218185602086016106e2
565b61052a81610744565b840191505092915050565b60006105408261067a56
5b61054a8185610696565b935061055a8185602086016106e2565b8084019150
5092915050565b60006105728284610535565b915081905092915050565b6000
60208201905061059260008301846104c0565b92915050565b60006020820190
5081810360008301526105b38184866104cf565b90509392505050565b600060
408201905081810360008301526105d78186886104cf565b9050818103602083
01526105ec8184866104cf565b905095945050505050565b6000602082019050
818103600083015261061181846104fc565b905092915050565b600060405190
5081810181811067ffffffffffffffff821117156106405761063f610715565b
5b8060405250919050565b600067ffffffffffffffff82111561066557610664
610715565b5b601f19601f8301169050602081019050919050565b6000815190
50919050565b600082825260208201905092915050565b600081905092915050
565b60006106ac826106b3565b9050919050565b600073ffffffffffffffffff
ffffffffffffffffffffff82169050919050565b828183376000838301525050
50565b60005b838110156107005780820151818401526020810190506106e556
5b8381111561070f576000848401525b50505050565b7f4e487b710000000000
0000000000000000000000000000000000000000000000600052604160045260
246000fd5b6000601f19601f830116905091905056fea2646970667358221220
348c450ee4dccb46592b6969ecd79ee3ebebca1d840561267a9b13db44c22e29
64736f6c63430008000033
`)

	// deploy proxy
	tx1 := gethtypes.NewContractCreation(0, big.NewInt(0), 1000000, big.NewInt(1), creationBytecode)
	tx1 = ethutils.MustSignTx(tx1, _app.chainId.ToBig(), ethutils.MustHexToPrivKey(privKey))

	testutils.ExecTxInBlock(_app, 1, tx1)
	contractAddr := gethcrypto.CreateAddress(addr, tx1.Nonce())
	code := getCode(_app, contractAddr)
	require.True(t, len(code) > 0)

	key := []byte{0xAB, 0xCD}
	val := bytes.Repeat([]byte{0x12, 0x34}, 500)

	// call set()
	data := _sep101ABI.MustPack("set", key, val)
	tx2 := gethtypes.NewTransaction(1, contractAddr, big.NewInt(0), 1000000, big.NewInt(1), data)
	tx2 = ethutils.MustSignTx(tx2, _app.chainId.ToBig(), ethutils.MustHexToPrivKey(privKey))
	testutils.ExecTxInBlock(_app, 3, tx2)

	blk3 := getBlock(_app, 3)
	require.Equal(t, int64(3), blk3.Number)
	require.Len(t, blk3.Transactions, 1)
	txInBlk3 := getTx(_app, blk3.Transactions[0])
	require.Equal(t, gethtypes.ReceiptStatusSuccessful, txInBlk3.Status)
	require.Equal(t, "success", txInBlk3.StatusStr)
	require.Equal(t, tx2.Hash(), gethcmn.Hash(txInBlk3.Hash))

	// call get()
	data = _sep101ABI.MustPack("get", key)
	tx4 := gethtypes.NewTransaction(0, contractAddr, big.NewInt(0), 10000000, big.NewInt(1), data)
	statusCode, statusStr, output := call(_app, addr, tx4)
	require.Equal(t, 0, statusCode)
	require.Equal(t, "success", statusStr)
	require.Equal(t, val, output)
}
